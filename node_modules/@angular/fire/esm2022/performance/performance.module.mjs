import { isPlatformBrowser } from '@angular/common';
import { InjectionToken, Injector, NgModule, NgZone, Optional, PLATFORM_ID, makeEnvironmentProviders, } from '@angular/core';
import { VERSION, ɵAngularFireSchedulers, ɵgetDefaultInstanceOf } from '@angular/fire';
import { FirebaseApp, FirebaseApps } from '@angular/fire/app';
import { registerVersion } from 'firebase/app';
import { PERFORMANCE_PROVIDER_NAME, Performance, PerformanceInstances } from './performance';
import * as i0 from "@angular/core";
export const PROVIDED_PERFORMANCE_INSTANCES = new InjectionToken('angularfire2.performance-instances');
export function defaultPerformanceInstanceFactory(provided, defaultApp, 
// eslint-disable-next-line @typescript-eslint/ban-types
platform) {
    if (!isPlatformBrowser(platform)) {
        return null;
    }
    const defaultPerformance = ɵgetDefaultInstanceOf(PERFORMANCE_PROVIDER_NAME, provided, defaultApp);
    return defaultPerformance && new Performance(defaultPerformance);
}
export function performanceInstanceFactory(fn) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return (zone, platform, injector) => {
        if (!isPlatformBrowser(platform)) {
            return null;
        }
        const performance = zone.runOutsideAngular(() => fn(injector));
        return new Performance(performance);
    };
}
const PERFORMANCE_INSTANCES_PROVIDER = {
    provide: PerformanceInstances,
    deps: [
        [new Optional(), PROVIDED_PERFORMANCE_INSTANCES],
    ]
};
const DEFAULT_PERFORMANCE_INSTANCE_PROVIDER = {
    provide: Performance,
    useFactory: defaultPerformanceInstanceFactory,
    deps: [
        [new Optional(), PROVIDED_PERFORMANCE_INSTANCES],
        FirebaseApp,
        PLATFORM_ID,
    ]
};
export class PerformanceModule {
    constructor() {
        registerVersion('angularfire', VERSION.full, 'perf');
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.6", ngImport: i0, type: PerformanceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.0.6", ngImport: i0, type: PerformanceModule });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.0.6", ngImport: i0, type: PerformanceModule, providers: [
            DEFAULT_PERFORMANCE_INSTANCE_PROVIDER,
            PERFORMANCE_INSTANCES_PROVIDER,
        ] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.6", ngImport: i0, type: PerformanceModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        DEFAULT_PERFORMANCE_INSTANCE_PROVIDER,
                        PERFORMANCE_INSTANCES_PROVIDER,
                    ]
                }]
        }], ctorParameters: () => [] });
export function providePerformance(fn, ...deps) {
    registerVersion('angularfire', VERSION.full, 'perf');
    return makeEnvironmentProviders([
        DEFAULT_PERFORMANCE_INSTANCE_PROVIDER,
        PERFORMANCE_INSTANCES_PROVIDER,
        {
            provide: PROVIDED_PERFORMANCE_INSTANCES,
            useFactory: performanceInstanceFactory(fn),
            multi: true,
            deps: [
                NgZone,
                PLATFORM_ID,
                Injector,
                ɵAngularFireSchedulers,
                FirebaseApps,
                ...deps,
            ]
        }
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2UubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BlcmZvcm1hbmNlL3BlcmZvcm1hbmNlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBRUwsY0FBYyxFQUNkLFFBQVEsRUFDUixRQUFRLEVBQ1IsTUFBTSxFQUNOLFFBQVEsRUFDUixXQUFXLEVBQ1gsd0JBQXdCLEdBQ3pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRS9DLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTdGLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLElBQUksY0FBYyxDQUFnQixvQ0FBb0MsQ0FBQyxDQUFDO0FBRXRILE1BQU0sVUFBVSxpQ0FBaUMsQ0FDL0MsUUFBeUMsRUFDekMsVUFBdUI7QUFDdkIsd0RBQXdEO0FBQ3hELFFBQWdCO0lBRWhCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUFFLE9BQU8sSUFBSSxDQUFDO0tBQUU7SUFDbEQsTUFBTSxrQkFBa0IsR0FBRyxxQkFBcUIsQ0FBc0IseUJBQXlCLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZILE9BQU8sa0JBQWtCLElBQUksSUFBSSxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNuRSxDQUFDO0FBRUQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLEVBQStDO0lBQ3hGLHdEQUF3RDtJQUN4RCxPQUFPLENBQUMsSUFBWSxFQUFFLFFBQWdCLEVBQUUsUUFBa0IsRUFBRSxFQUFFO1FBQzVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDO1NBQUU7UUFDbEQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQy9ELE9BQU8sSUFBSSxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sOEJBQThCLEdBQUc7SUFDckMsT0FBTyxFQUFFLG9CQUFvQjtJQUM3QixJQUFJLEVBQUU7UUFDSixDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsOEJBQThCLENBQUU7S0FDbEQ7Q0FDRixDQUFDO0FBRUYsTUFBTSxxQ0FBcUMsR0FBRztJQUM1QyxPQUFPLEVBQUUsV0FBVztJQUNwQixVQUFVLEVBQUUsaUNBQWlDO0lBQzdDLElBQUksRUFBRTtRQUNKLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSw4QkFBOEIsQ0FBRTtRQUNqRCxXQUFXO1FBQ1gsV0FBVztLQUNaO0NBQ0YsQ0FBQztBQVFGLE1BQU0sT0FBTyxpQkFBaUI7SUFDNUI7UUFDRSxlQUFlLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdkQsQ0FBQzt1R0FIVSxpQkFBaUI7d0dBQWpCLGlCQUFpQjt3R0FBakIsaUJBQWlCLGFBTGpCO1lBQ1QscUNBQXFDO1lBQ3JDLDhCQUE4QjtTQUMvQjs7MkZBRVUsaUJBQWlCO2tCQU43QixRQUFRO21CQUFDO29CQUNSLFNBQVMsRUFBRTt3QkFDVCxxQ0FBcUM7d0JBQ3JDLDhCQUE4QjtxQkFDL0I7aUJBQ0Y7O0FBT0QsTUFBTSxVQUFVLGtCQUFrQixDQUNoQyxFQUErQyxFQUFFLEdBQUcsSUFBVztJQUUvRCxlQUFlLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFckQsT0FBTyx3QkFBd0IsQ0FBQztRQUM5QixxQ0FBcUM7UUFDckMsOEJBQThCO1FBQzlCO1lBQ0UsT0FBTyxFQUFFLDhCQUE4QjtZQUN2QyxVQUFVLEVBQUUsMEJBQTBCLENBQUMsRUFBRSxDQUFDO1lBQzFDLEtBQUssRUFBRSxJQUFJO1lBQ1gsSUFBSSxFQUFFO2dCQUNKLE1BQU07Z0JBQ04sV0FBVztnQkFDWCxRQUFRO2dCQUNSLHNCQUFzQjtnQkFDdEIsWUFBWTtnQkFDWixHQUFHLElBQUk7YUFDUjtTQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIEVudmlyb25tZW50UHJvdmlkZXJzLFxuICBJbmplY3Rpb25Ub2tlbixcbiAgSW5qZWN0b3IsXG4gIE5nTW9kdWxlLFxuICBOZ1pvbmUsXG4gIE9wdGlvbmFsLFxuICBQTEFURk9STV9JRCxcbiAgbWFrZUVudmlyb25tZW50UHJvdmlkZXJzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZFUlNJT04sIMm1QW5ndWxhckZpcmVTY2hlZHVsZXJzLCDJtWdldERlZmF1bHRJbnN0YW5jZU9mIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5pbXBvcnQgeyBGaXJlYmFzZUFwcCwgRmlyZWJhc2VBcHBzIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZS9hcHAnO1xuaW1wb3J0IHsgcmVnaXN0ZXJWZXJzaW9uIH0gZnJvbSAnZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IEZpcmViYXNlUGVyZm9ybWFuY2UgfSBmcm9tICdmaXJlYmFzZS9wZXJmb3JtYW5jZSc7XG5pbXBvcnQgeyBQRVJGT1JNQU5DRV9QUk9WSURFUl9OQU1FLCBQZXJmb3JtYW5jZSwgUGVyZm9ybWFuY2VJbnN0YW5jZXMgfSBmcm9tICcuL3BlcmZvcm1hbmNlJztcblxuZXhwb3J0IGNvbnN0IFBST1ZJREVEX1BFUkZPUk1BTkNFX0lOU1RBTkNFUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxQZXJmb3JtYW5jZVtdPignYW5ndWxhcmZpcmUyLnBlcmZvcm1hbmNlLWluc3RhbmNlcycpO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFBlcmZvcm1hbmNlSW5zdGFuY2VGYWN0b3J5KFxuICBwcm92aWRlZDogRmlyZWJhc2VQZXJmb3JtYW5jZVtdfHVuZGVmaW5lZCxcbiAgZGVmYXVsdEFwcDogRmlyZWJhc2VBcHAsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gIHBsYXRmb3JtOiBPYmplY3Rcbikge1xuICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtKSkgeyByZXR1cm4gbnVsbDsgfVxuICBjb25zdCBkZWZhdWx0UGVyZm9ybWFuY2UgPSDJtWdldERlZmF1bHRJbnN0YW5jZU9mPEZpcmViYXNlUGVyZm9ybWFuY2U+KFBFUkZPUk1BTkNFX1BST1ZJREVSX05BTUUsIHByb3ZpZGVkLCBkZWZhdWx0QXBwKTtcbiAgcmV0dXJuIGRlZmF1bHRQZXJmb3JtYW5jZSAmJiBuZXcgUGVyZm9ybWFuY2UoZGVmYXVsdFBlcmZvcm1hbmNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBlcmZvcm1hbmNlSW5zdGFuY2VGYWN0b3J5KGZuOiAoaW5qZWN0b3I6IEluamVjdG9yKSA9PiBGaXJlYmFzZVBlcmZvcm1hbmNlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gIHJldHVybiAoem9uZTogTmdab25lLCBwbGF0Zm9ybTogT2JqZWN0LCBpbmplY3RvcjogSW5qZWN0b3IpID0+IHtcbiAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtKSkgeyByZXR1cm4gbnVsbDsgfVxuICAgIGNvbnN0IHBlcmZvcm1hbmNlID0gem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBmbihpbmplY3RvcikpO1xuICAgIHJldHVybiBuZXcgUGVyZm9ybWFuY2UocGVyZm9ybWFuY2UpO1xuICB9O1xufVxuXG5jb25zdCBQRVJGT1JNQU5DRV9JTlNUQU5DRVNfUFJPVklERVIgPSB7XG4gIHByb3ZpZGU6IFBlcmZvcm1hbmNlSW5zdGFuY2VzLFxuICBkZXBzOiBbXG4gICAgW25ldyBPcHRpb25hbCgpLCBQUk9WSURFRF9QRVJGT1JNQU5DRV9JTlNUQU5DRVMgXSxcbiAgXVxufTtcblxuY29uc3QgREVGQVVMVF9QRVJGT1JNQU5DRV9JTlNUQU5DRV9QUk9WSURFUiA9IHtcbiAgcHJvdmlkZTogUGVyZm9ybWFuY2UsXG4gIHVzZUZhY3Rvcnk6IGRlZmF1bHRQZXJmb3JtYW5jZUluc3RhbmNlRmFjdG9yeSxcbiAgZGVwczogW1xuICAgIFtuZXcgT3B0aW9uYWwoKSwgUFJPVklERURfUEVSRk9STUFOQ0VfSU5TVEFOQ0VTIF0sXG4gICAgRmlyZWJhc2VBcHAsXG4gICAgUExBVEZPUk1fSUQsXG4gIF1cbn07XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW1xuICAgIERFRkFVTFRfUEVSRk9STUFOQ0VfSU5TVEFOQ0VfUFJPVklERVIsXG4gICAgUEVSRk9STUFOQ0VfSU5TVEFOQ0VTX1BST1ZJREVSLFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFBlcmZvcm1hbmNlTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgcmVnaXN0ZXJWZXJzaW9uKCdhbmd1bGFyZmlyZScsIFZFUlNJT04uZnVsbCwgJ3BlcmYnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVBlcmZvcm1hbmNlKFxuICBmbjogKGluamVjdG9yOiBJbmplY3RvcikgPT4gRmlyZWJhc2VQZXJmb3JtYW5jZSwgLi4uZGVwczogYW55W11cbik6IEVudmlyb25tZW50UHJvdmlkZXJzIHtcbiAgcmVnaXN0ZXJWZXJzaW9uKCdhbmd1bGFyZmlyZScsIFZFUlNJT04uZnVsbCwgJ3BlcmYnKTtcblxuICByZXR1cm4gbWFrZUVudmlyb25tZW50UHJvdmlkZXJzKFtcbiAgICBERUZBVUxUX1BFUkZPUk1BTkNFX0lOU1RBTkNFX1BST1ZJREVSLFxuICAgIFBFUkZPUk1BTkNFX0lOU1RBTkNFU19QUk9WSURFUixcbiAgICB7XG4gICAgICBwcm92aWRlOiBQUk9WSURFRF9QRVJGT1JNQU5DRV9JTlNUQU5DRVMsXG4gICAgICB1c2VGYWN0b3J5OiBwZXJmb3JtYW5jZUluc3RhbmNlRmFjdG9yeShmbiksXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgIGRlcHM6IFtcbiAgICAgICAgTmdab25lLFxuICAgICAgICBQTEFURk9STV9JRCxcbiAgICAgICAgSW5qZWN0b3IsXG4gICAgICAgIMm1QW5ndWxhckZpcmVTY2hlZHVsZXJzLFxuICAgICAgICBGaXJlYmFzZUFwcHMsXG4gICAgICAgIC4uLmRlcHMsXG4gICAgICBdXG4gICAgfVxuICBdKTtcbn1cbiJdfQ==